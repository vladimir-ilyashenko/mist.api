variables:
  GET_SOURCES_ATTEMPTS: 3

stages:
  - build
  - generate_api_spec
  - test

#################### BUILD STAGE ####################
build_mist_image:
  stage: build
  before_script:
    # Configure registries.
    - |
        export REGISTRIES=""

        # Login to gitlab docker registry.
        if [ -n "$CI_REGISTRY_IMAGE" ]; then
          echo "Logging in to gitlab registry."
          docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" \
            $CI_REGISTRY
          export REGISTRIES="$REGISTRIES $CI_REGISTRY_IMAGE"
          echo "Logged in to gitlab registry."
        else
          echo "No credentials provided for gitlab registry, skipping."
        fi

        # Login to other registry.
        if [ -n "$EXT_REGISTRY" ] && \
           [ -n "$EXT_REGISTRY_IMAGE" ] && \
           [ -n "$EXT_REGISTRY_USER" ] && \
           [ -n "$EXT_REGISTRY_PASSWORD" ]
        then
          echo "Logging in to $EXT_REGISTRY."
          docker login -u "$EXT_REGISTRY_USER" -p "$EXT_REGISTRY_PASSWORD" \
            "$EXT_REGISTRY"
          export REGISTRIES="$REGISTRIES $EXT_REGISTRY_IMAGE"
          echo "Logged in to $EXT_REGISTRY."
        else
          echo "No credentials provided for external registry, skipping."
        fi

        # Login to dockerhub.
        if [ -n "$DOCKERHUB_IMAGE" ] && \
           [ -n "$DOCKERHUB_USER" ] && \
           [ -n "$DOCKERHUB_PASSWORD" ]
        then
          echo "Logging in to dockerhub."
          docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
          export REGISTRIES="$REGISTRIES $DOCKERHUB_IMAGE"
          echo "Logged in to dockerhub."
        else
          echo "No credentials provided for dockerhub, skipping."
        fi

        # Check if any registry configured.
        if [ -z "$REGISTRIES" ]; then
          echo "No registries configured, exiting."
          exit 1
        fi

  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - docker pull mist/python3
    - docker build --rm -t gcr.io/mist-ops/mist:$CI_COMMIT_SHA --build-arg API_VERSION_SHA=$CI_COMMIT_SHA --build-arg API_VERSION_NAME=$CI_COMMIT_REF_NAME .
    - docker tag gcr.io/mist-ops/mist:$CI_COMMIT_SHA gcr.io/mist-ops/mist:$CI_COMMIT_REF_SLUG
    - docker tag gcr.io/mist-ops/mist:$CI_COMMIT_SHA mist/mist:$CI_COMMIT_SHA
    - docker tag gcr.io/mist-ops/mist:$CI_COMMIT_REF_SLUG mist/mist:$CI_COMMIT_REF_SLUG
    - docker push gcr.io/mist-ops/mist:$CI_COMMIT_SHA
    - docker push gcr.io/mist-ops/mist:$CI_COMMIT_REF_SLUG
    - docker push mist/mist:$CI_COMMIT_SHA
    - docker push mist/mist:$CI_COMMIT_REF_SLUG
  tags:
    - builder
  dependencies: []


#################### GENERATE_API_SPEC STAGE ####################
generate_api_spec:
  stage: generate_api_spec
  image: gcr.io/mist-ops/mist:$CI_COMMIT_SHA
  before_script:
    - cd /mist.api
  script:
    - python3 openapi/generate_api_spec.py
    - ls -l openapi


#################### TEST STAGE ####################
flake8:
  stage: test
  image: gcr.io/mist-ops/mist:$CI_COMMIT_SHA
  variables:
    GIT_STRATEGY: none
  before_script:
    - cd /mist.api
  script:
    - flake8 --ignore=E402,E722,F632,F841,W504,W605 --exclude=v2,paramiko,celerybeat-mongo,libcloud,run_script

uniq:
  stage: test
  image: gcr.io/mist-ops/mist:$CI_COMMIT_SHA
  variables:
    GIT_STRATEGY: none
  before_script:
    - cd /mist.api
  script:
    - ls migrations/ | uniq -c -d -w 4 | grep . && exit 1 || exit 0
